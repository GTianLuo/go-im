// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ipConfig.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpConfigClient is the client API for IpConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpConfigClient interface {
	// SayHello 方法
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type ipConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewIpConfigClient(cc grpc.ClientConnInterface) IpConfigClient {
	return &ipConfigClient{cc}
}

func (c *ipConfigClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/server.IpConfig/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpConfigServer is the server API for IpConfig service.
// All implementations must embed UnimplementedIpConfigServer
// for forward compatibility
type IpConfigServer interface {
	// SayHello 方法
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedIpConfigServer()
}

// UnimplementedIpConfigServer must be embedded to have forward compatible implementations.
type UnimplementedIpConfigServer struct {
}

func (UnimplementedIpConfigServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedIpConfigServer) mustEmbedUnimplementedIpConfigServer() {}

// UnsafeIpConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpConfigServer will
// result in compilation errors.
type UnsafeIpConfigServer interface {
	mustEmbedUnimplementedIpConfigServer()
}

func RegisterIpConfigServer(s grpc.ServiceRegistrar, srv IpConfigServer) {
	s.RegisterService(&IpConfig_ServiceDesc, srv)
}

func _IpConfig_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpConfigServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.IpConfig/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpConfigServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpConfig_ServiceDesc is the grpc.ServiceDesc for IpConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.IpConfig",
	HandlerType: (*IpConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _IpConfig_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipConfig.proto",
}
